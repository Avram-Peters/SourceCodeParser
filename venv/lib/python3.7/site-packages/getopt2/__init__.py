# -*- coding: utf-8 -*-
#
# Copyright (c) 2019 Aleksandar Buza <aleksandar.buza@consulteer.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


"""
Parser for command line options.

This module helps scripts to parse the command line arguments in
sys.argv.  It supports the same conventions as the Unix getopt()
function (including the special meanings of arguments of the form '-'.
This module provides one function:

getopt() -- Parse command line options
"""

__all__ = ['getopt2']

from typing import List
from typing import Tuple


def getopt2(argv: List[Tuple], opt_string: str):
    """
    getopt(argv, opt_string) -> opts

    Parses command line options and parameter list.  argv is the
    argument list to be parsed, without the leading reference to the
    running program.  Typically, this means "sys.argv[1:]".
    opt_string is the string of option letters that the script wants to
    recognize, with options that require an argument followed by a
    colon (i.e., the same format that Unix getopt() uses).

    The return value consists a list of (option, value) pairs;
    Each option-and-value pair returned has
    the option as its first element, prefixed with a hyphen (e.g.,
    '-x'), and the option argument as its second element, or an empty
    string if the option has no argument.  The options occur in the
    list in the same order in which they were found, thus allowing
    multiple occurrences.

    argv            - sys.argv[1:]
    opt_string      - "hvi:o:" etc.
    """

    def func(f):
        def wrapper():
            opts = []

            if len(argv) is 0:
                pass

            elif (len(argv) is 1) and (len(argv[0]) is 2) and (argv[0][0] is '-'):
                opts.append((argv[0], ''))

            else:
                argv_last_cycle, argv_iter = len(argv) - 2, 0

                for curr_argv, next_argv in zip(argv, argv[1:]):
                    curr_opt_ptr = opt_string.index(curr_argv[-1:]) if opt_string.find(curr_argv[-1:]) is not -1 else 0
                    next_opt_ptr = opt_string.index(next_argv[-1:]) if opt_string.find(next_argv[-1:]) is not -1 else 0

                    if (len(curr_argv) is 2) and (curr_argv[0] is '-'):
                        if 0 < curr_opt_ptr + 1 <= len(opt_string):
                            if opt_string[curr_opt_ptr + 1] is ':':
                                if next_argv[0] is not '-':
                                    opts.append((curr_argv, next_argv))

                            else:
                                opts.append((curr_argv, ''))

                    if argv_iter is argv_last_cycle:
                        if (next_argv[0] is '-') and (opt_string[next_opt_ptr + 1] is not ':'):
                            opts.append((next_argv, ''))

                    argv_iter += 1

            f(opts)

        return wrapper
    return func
